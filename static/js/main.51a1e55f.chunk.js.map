{"version":3,"sources":["components/Input.jsx","components/Title.jsx","components/Todolist.jsx","components/Search.jsx","App.js","reportWebVitals.js","index.js"],"names":["Input","props","useState","task","setTask","onSubmit","event","preventDefault","setTodos","todos","className","value","placeholder","type","onChange","target","Title","title","Todolist","filter","val","searchKeyword","toString","toLowerCase","includes","map","todo","index","newTodos","todoindex","handleOnEdit","onClick","todoIndex","handleRemoveTask","Search","App","setSearchKeyword","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAgCeA,EA7BD,SAACC,GAEf,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAeE,OACE,gCACE,0CAGA,sBAAMC,SAjBS,SAACC,GACpBA,EAAMC,iBACO,KAATJ,IACJF,EAAMO,UAAU,SAAAC,GAAK,4BAASA,GAAT,CAAe,CAAEN,aACtCC,EAAQ,MAa4BM,UAAU,YAA1C,SACE,uBAAOC,MAAQR,EAAOO,UAAU,YAAYE,YAAY,WAAWC,KAAK,OAAOC,SAVjE,SAACR,GACrBF,EAASE,EAAMS,OAAOJ,gBCTTK,EAND,SAACf,GACb,OACE,6BAAKA,EAAMgB,SCmCAC,EArCE,SAACjB,GAiBhB,OACE,qBAAKS,UAAU,YAAf,SACE,oBAAIA,UAAU,WAAd,SACIT,EAAMQ,MAAMU,QAAO,SAACC,GACpB,OAA4B,KAAxBnB,EAAMoB,iBAGRD,EAAIjB,KAAKmB,WAAWC,cAAcC,SAASvB,EAAMoB,cAAcC,WAAWC,iBAFnEH,KAMRK,KAAI,SAACC,EAAMC,GAAP,OACL,qBAAIjB,UAAU,OAAd,UAAmC,uBAAOG,KAAK,OAAOH,UAAU,WAAWC,MAAOe,EAAKvB,KAAMW,SAAU,SAACR,GAAD,OAtB1F,SAACqB,EAAOhB,GAC3B,IAAMiB,EAAW3B,EAAMQ,MAAMgB,KAAI,SAACC,EAAMG,GAItC,OAHIA,IAAcF,IAChBD,EAAKvB,KAAOQ,GAEPe,KAETzB,EAAMO,SAASoB,GAeyGE,CAAaH,EAAOrB,EAAMS,OAAOJ,UACnJ,sBAAMoB,QAAS,kBA5BE,SAAAJ,GAEvB1B,EAAMO,UADa,SAAAC,GAAK,OAAI,YAAIA,GAAOU,QAAO,SAACO,EAAKM,GAAN,OAAoBA,IAAcL,QA2BrDM,CAAiBN,IAAtC,SAA+C,mBAAGjB,UAAU,yBADjCiB,WCPtBO,EAtBA,SAACjC,GAEd,OACE,qBAAKS,UAAU,YAAf,SACE,uBAAOG,KAAK,OAAOH,UAAU,YAAYE,YAAY,iBAAiBE,SAAWb,EAAMa,cCiC9EqB,MA/Bf,WAEA,IAUA,EAA0BjC,mBAVL,CACnB,CACEC,KAAM,SAER,CACEA,KAAM,WAKV,mBAAOM,EAAP,KAAcD,EAAd,KAGA,EAA0CN,mBAAS,IAAnD,mBAAOmB,EAAP,KAAsBe,EAAtB,KAME,OACE,sBAAK1B,UAAU,UAAf,UACE,cAAC,EAAD,CAAOO,MAAO,cACd,cAAC,EAAD,CAAOR,MAAOA,EAAOD,SAAUA,IAC/B,cAAC,EAAD,CAAQC,MAAOA,EAAOE,MAAOU,EAAeP,SAR7B,SAACR,GACpB8B,EAAiB9B,EAAMS,OAAOJ,UAQ1B,cAAC,EAAD,CAAUF,MAAOA,EAAOD,SAAUA,EAAUa,cAAeA,EAAee,iBAAkBA,QCtBnFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.51a1e55f.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\n\nconst Input = (props) => {\n// 入力した情報を保持するための変数task\nconst [task, setTask] = useState('')\n\n//onSubmitで発火する関数　handleSubmit todosの中身を展開して、taskに追加する\nconst handleSubmit = (event) => {\n  event.preventDefault()\n  if( task === '') return\n  props.setTodos( todos => [ ...todos,{ task }])\n  setTask('')\n}\n\n// onChangeイベントで発火する関数　event.target.valueでinputに入力した値が取得できる\nconst handleNewTask = (event) => {\n  setTask( event.target.value )\n}\n\n  return (\n    <div>\n      <h2>ADD TASK</h2>\n      {/* inputタグに入力した値を取得するonChangeイベント　onChangeイベントで実行する関数はhandleNewTask */}\n      {/* エンターを押したらタスクを一覧にして表示するhandleSubmit */}\n      <form onSubmit={ handleSubmit } className=\"task-area\">\n        <input value={ task } className=\"inputArea\" placeholder=\"New Task\" type=\"text\" onChange={ handleNewTask } />\n      </form>\n    </div>\n  )\n}\n\nexport default Input\n","import React from 'react'\n\nconst Title = (props) => {\n  return (\n    <h1>{props.title}</h1>\n  );\n}\n\nexport default Title\n","import React from 'react'\n\nconst Todolist = (props) => {\n\n  const handleRemoveTask = index => {\n    const newTodos = ( todos => [...todos].filter((todo,todoIndex) => todoIndex !== index));\n    props.setTodos(newTodos)\n  }\n\n  const handleOnEdit = (index, value) => {\n    const newTodos = props.todos.map((todo, todoindex) => {\n      if (todoindex === index) {\n        todo.task = value;\n      }\n      return todo;\n    });\n    props.setTodos(newTodos);\n  }\n\n  return (\n    <div className=\"task-area\">\n      <ul className=\"todolist\">\n        { props.todos.filter((val) => {\n          if (props.searchKeyword === '') {\n            return val;\n          } else if (\n            val.task.toString().toLowerCase().includes(props.searchKeyword.toString().toLowerCase())\n          ) {\n            return val;\n          } return false;\n        }).map((todo, index) => (\n          <li className=\"todo\" key={ index }><input type=\"text\" className=\"editForm\" value={todo.task} onChange={(event) => handleOnEdit(index, event.target.value)} />\n          <span onClick={() => handleRemoveTask(index) }><i className=\"far fa-trash-alt\"></i></span></li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Todolist","import React from 'react'\n\nconst Search = (props) => {\n\n  return (\n    <div className=\"task-area\">\n      <input type=\"text\" className=\"inputArea\" placeholder=\"Search Keyword\" onChange={ props.onChange }/>\n\n      {/* { props.todos.filter((val) => {\n        if (search === \"\") {\n          return val;\n        } else if (\n          val.task.toLowerCase().includes(search.toLowerCase())\n          ) {\n            return val;\n          }\n        }).map((todo, index) => (\n          <li key={ index }><input type=\"text\" value={todo.task} onChange={(event) => handleOnEdit(index, event.target.value)} />\n          <span onClick={() => handleRemoveTask(index) }><i className=\"far fa-trash-alt fa-pull-right\"></i></span></li>\n        ))} */}\n    </div>\n  )\n}\n\nexport default Search\n","import React, {useState} from 'react';\nimport './App.css';\nimport Input from './components/Input';\nimport Title from './components/Title';\nimport Todolist from './components/Todolist';\nimport Search from './components/Search';\n\n\nfunction App() {\n// 最初のTodoリストの配列\nconst initialState = [\n  {\n    task: 'Task1'\n  },\n  {\n    task: 'Task2'\n  },\n]\n\n// 上で定義した配列をuseStateでtodosに入れる\nconst [todos, setTodos] = useState(initialState);\n\n// Searchコンポーネントで入力されたキーワードを保存するステート\nconst [searchKeyword, setSearchKeyword] = useState('');\n\nconst handleSearch = (event) => {\n  setSearchKeyword(event.target.value);\n}\n\n  return (\n    <div className=\"wrapper\">\n      <Title title={'Todo List'} />\n      <Input todos={todos} setTodos={setTodos} />\n      <Search todos={todos} value={searchKeyword} onChange={handleSearch}/>\n      <Todolist todos={todos} setTodos={setTodos} searchKeyword={searchKeyword} setSearchKeyword={setSearchKeyword}/>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}